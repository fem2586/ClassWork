{\rtf1\ansi\ansicpg1251\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red248\green38\blue113;\red20\green22\blue25;\red199\green200\blue201;
\red141\green86\blue190;\red224\green213\blue97;\red137\green226\blue51;\red19\green152\blue154;\red86\green90\blue93;
}
{\*\expandedcolortbl;;\cssrgb\c98824\c26275\c51765;\cssrgb\c10196\c11373\c12941;\cssrgb\c81961\c82353\c82745;
\cssrgb\c62745\c43529\c79216;\cssrgb\c90196\c85882\c45490;\cssrgb\c59608\c89020\c25882;\cssrgb\c0\c65490\c66667;\cssrgb\c41176\c42745\c43922;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl340\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 -\cf4 \strokec4  special variable: stores memory address\cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf5 \cb3 \strokec5 int\cf4 \strokec4  x \cf2 \strokec2 =\cf4 \strokec4  \cf5 \strokec5 10\cf4 \strokec4 ;\cb1 \
\cf5 \cb3 \strokec5 int\cf4 \strokec4  \cf5 \strokec5 *\cf4 \strokec4 pt \cf2 \strokec2 =\cf4 \strokec4  \cf2 \strokec2 &\cf4 \strokec4 x;\cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf4 \cb3 pt \cf2 \strokec2 =\cf4 \strokec4  pt \cf2 \strokec2 +\cf4 \strokec4  \cf5 \strokec5 1\cf4 \cb1 \strokec4 \
\cb3 \uc0\u8203 \cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf5 \cb3 \strokec5 char\cf4 \strokec4  ch \cf2 \strokec2 =\cf4 \strokec4  \cf6 \strokec6 'a'\cf4 \strokec4 ;\cb1 \
\cf5 \cb3 \strokec5 char\cf4 \strokec4  \cf5 \strokec5 *\cf4 \strokec4 pt2 \cf2 \strokec2 =\cf4 \strokec4  \cf2 \strokec2 &\cf4 \strokec4 ch;\cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf4 \cb3 pt2\cf2 \strokec2 ++\cf4 \strokec4 ;\cb1 \
\cb3 \uc0\u8203 \cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf5 \cb3 \strokec5 int\cf4 \strokec4  \cf5 \strokec5 *\cf4 \strokec4 arr;\cb1 \
\cf5 \cb3 \strokec5 int\cf4 \strokec4  arr[\cf5 \strokec5 3\cf4 \strokec4 ];\cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf4 \cb3 \uc0\u8203 \cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf5 \cb3 \strokec5 int\cf4 \strokec4  \cf7 \strokec7 arr_sum\cf4 \strokec4 (\cf5 \strokec5 int\cf4 \strokec4  arr[], \cf5 \strokec5 int\cf4 \strokec4  len) \{\cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf4 \cb3 	\cf5 \strokec5 int\cf4 \strokec4  total \cf2 \strokec2 =\cf4 \strokec4  \cf5 \strokec5 0\cf4 \strokec4 ;\cb1 \
\cb3 	\cf8 \strokec8 for\cf4 \strokec4  (\cf5 \strokec5 int\cf4 \strokec4  i \cf2 \strokec2 =\cf4 \strokec4  \cf5 \strokec5 0\cf4 \strokec4 ; i \cf2 \strokec2 <\cf4 \strokec4  len; i\cf2 \strokec2 ++\cf4 \strokec4 ) \{\cb1 \
\cb3 		total \cf2 \strokec2 +=\cf4 \strokec4  arr[i];\cb1 \
\cb3 	\}\cb1 \
\cb3 	\cf8 \strokec8 return\cf4 \strokec4  total;\cb1 \
\cb3 \}\cb1 \
\cb3 \uc0\u8203 \cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf5 \cb3 \strokec5 int\cf4 \strokec4  \cf7 \strokec7 arr_sum\cf4 \strokec4 (\cf5 \strokec5 int\cf4 \strokec4  \cf5 \strokec5 *\cf4 \strokec4 arr, \cf5 \strokec5 int\cf4 \strokec4  len) \{\cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf4 \cb3 	\cf5 \strokec5 int\cf4 \strokec4  total \cf2 \strokec2 =\cf4 \strokec4  \cf5 \strokec5 0\cf4 \strokec4 ;\cb1 \
\cb3 	\cf8 \strokec8 for\cf4 \strokec4  (\cf5 \strokec5 int\cf4 \strokec4  i \cf2 \strokec2 =\cf4 \strokec4  \cf5 \strokec5 0\cf4 \strokec4 ; i \cf2 \strokec2 <\cf4 \strokec4  len; i\cf2 \strokec2 ++\cf4 \strokec4 ) \{\cb1 \
\cb3 		\cf9 \strokec9 // dereference (content of)\cf4 \cb1 \strokec4 \
\cb3 		total \cf2 \strokec2 +=\cf4 \strokec4  \cf2 \strokec2 *\cf4 \strokec4 (arr \cf2 \strokec2 +\cf4 \strokec4  i);\cb1 \
\cb3 	\}\cb1 \
\cb3 	\cf8 \strokec8 return\cf4 \strokec4  total;\cb1 \
\cb3 \}\cb1 \
\cb3 \uc0\u8203 \cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf5 \cb3 \strokec5 int\cf4 \strokec4  x \cf2 \strokec2 =\cf4 \strokec4  \cf5 \strokec5 10\cf4 \strokec4 ;\cb1 \
\cf5 \cb3 \strokec5 int\cf4 \strokec4  \cf5 \strokec5 *\cf4 \strokec4 p \cf2 \strokec2 =\cf4 \strokec4  \cf2 \strokec2 &\cf4 \strokec4 x;\cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf9 \cb3 \strokec9 // int p[];\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl340\partightenfactor0
\cf4 \cb3 \uc0\u8203 \cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf5 \cb3 \strokec5 int\cf4 \strokec4  \cf5 \strokec5 **\cf4 \strokec4 a \cf2 \strokec2 =\cf4 \strokec4  \cf2 \strokec2 &\cf4 \strokec4 p;\cb1 \
\cf5 \cb3 \strokec5 int\cf4 \strokec4  a[][];\cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf4 \cb3 \uc0\u8203 \cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf5 \cb3 \strokec5 int\cf4 \strokec4  \cf5 \strokec5 **********\cf4 \strokec4 a;\cb1 \
\cf5 \cb3 \strokec5 int\cf4 \strokec4  foo[\cf5 \strokec5 10\cf4 \strokec4 ];\cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf4 \cb3 foo : holds the mem address of the first element in array foo\cb1 \
\cb3 \uc0\u8203 \cb1 \
\cb3 \uc0\u8203 \cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf5 \cb3 \strokec5 int\cf4 \strokec4  \cf5 \strokec5 *\cf4 \strokec4 arr[\cf5 \strokec5 10\cf4 \strokec4 ]; \cf9 \strokec9 // creates an array of 10 pointers\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 int\cf4 \strokec4  (\cf2 \strokec2 *\cf4 \strokec4 arr)[\cf5 \strokec5 10\cf4 \strokec4 ]; \cf9 \strokec9 // creates a pointer to an array of 10 integers\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl340\partightenfactor0
\cf4 \cb3 \uc0\u8203 \cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf8 \cb3 \strokec8 const\cf4 \strokec4  \cf5 \strokec5 int\cf4 \strokec4  a \cf2 \strokec2 =\cf4 \strokec4  \cf5 \strokec5 10\cf4 \strokec4 ;\cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf5 \cb3 \strokec5 int\cf4 \strokec4  \cf8 \strokec8 const\cf4 \strokec4  a \cf2 \strokec2 =\cf4 \strokec4  \cf5 \strokec5 10\cf4 \strokec4 ;\cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf4 \cb3 \uc0\u8203 \cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf9 \cb3 \strokec9 // integer cannot be modified (*p)\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl340\partightenfactor0
\cf8 \cb3 \strokec8 const\cf4 \strokec4  \cf5 \strokec5 int\cf4 \strokec4  \cf5 \strokec5 *\cf4 \strokec4 p; \cf9 \strokec9 // creates a pointer to a constant int\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl340\partightenfactor0
\cf4 \cb3 \uc0\u8203 \cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf9 \cb3 \strokec9 // pointer cannot be modified (p)\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl340\partightenfactor0
\cf5 \cb3 \strokec5 int\cf4 \strokec4  \cf5 \strokec5 *\cf8 \strokec8 const\cf4 \strokec4  p; \cf9 \strokec9 // creates a constant pointer to an interger\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl340\partightenfactor0
\cf4 \cb3 \uc0\u8203 \cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf9 \cb3 \strokec9 // p can be modified, *p cannot be modified, **p can be modified\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl340\partightenfactor0
\cf5 \cb3 \strokec5 int\cf4 \strokec4  \cf5 \strokec5 *\cf8 \strokec8 const\cf4 \strokec4  \cf2 \strokec2 *\cf4 \strokec4 p; \cf9 \strokec9 // creates a pointer to a constant pointer to an integer\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl340\partightenfactor0
\cf4 \cb3 \uc0\u8203 \cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf9 \cb3 \strokec9 // String is an array of chars that ends with '\\0' (null char)\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl340\partightenfactor0
\cf4 \cb3 \{\cf6 \strokec6 '1'\cf4 \strokec4 , \cf6 \strokec6 '2'\cf4 \strokec4 , \cf6 \strokec6 '3'\cf4 \strokec4 , \cf6 \strokec6 '4'\cf4 \strokec4 , \cf6 \strokec6 '5'\cf4 \strokec4 , \cf6 \strokec6 '6'\cf4 \strokec4 , \cf6 \strokec6 '7'\cf4 \strokec4 , \cf6 \strokec6 '8'\cf4 \strokec4 , \cf6 \strokec6 '9'\cf4 \strokec4 , \cf6 \strokec6 '\\0'\cf4 \strokec4 \}\cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf5 \cb3 \strokec5 char\cf4 \strokec4  str[\cf5 \strokec5 10\cf4 \strokec4 ] \cf2 \strokec2 =\cf4 \strokec4  \cf6 \strokec6 "123456789"\cf4 \strokec4 ;\cb1 \
\cf5 \cb3 \strokec5 char\cf4 \strokec4  \cf5 \strokec5 *\cf4 \strokec4 str \cf2 \strokec2 =\cf4 \strokec4  \cf6 \strokec6 "1234567890"\cf4 \strokec4 ;\cb1 \
\cf5 \cb3 \strokec5 char\cf4 \strokec4  str[] \cf2 \strokec2 =\cf4 \strokec4  \{\cf6 \strokec6 '1'\cf4 \strokec4 , \cf6 \strokec6 '2'\cf4 \strokec4 , \cf6 \strokec6 '3'\cf4 \strokec4 , \cf6 \strokec6 '4'\cf4 \strokec4 , \cf6 \strokec6 '5'\cf4 \strokec4 , \cf6 \strokec6 '6'\cf4 \strokec4 , \cf6 \strokec6 '7'\cf4 \strokec4 , \cf6 \strokec6 '8'\cf4 \strokec4 , \cf6 \strokec6 '9'\cf4 \strokec4 , \cf6 \strokec6 '\\0'\cf4 \strokec4 \};\cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf4 \cb3 \uc0\u8203 \cb1 \
\cb3 \uc0\u8203 \cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf9 \cb3 \strokec9 // struct\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl340\partightenfactor0
\cf8 \cb3 \strokec8 struct\cf4 \strokec4  \cf7 \strokec7 s\cf4 \strokec4  \{\cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf4 \cb3 	\cf9 \strokec9 //... some variables\cf4 \cb1 \strokec4 \
\cb3 	\cf5 \strokec5 int\cf4 \strokec4  a;\cb1 \
\cb3 	\cf9 \strokec9 //... some variables\cf4 \cb1 \strokec4 \
\cb3 \};\cb1 \
\cb3 \uc0\u8203 \cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf9 \cb3 \strokec9 // Given a pointer to a member within a struct, how do you get \cf4 \cb1 \strokec4 \
\cf9 \cb3 \strokec9 // the pointer to the struct?\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl340\partightenfactor0
\cf8 \cb3 \strokec8 struct\cf4 \strokec4  \cf7 \strokec7 s\cf2 \strokec2 *\cf7 \strokec7 get_s_ptr\cf4 \strokec4 (\cf5 \strokec5 int\cf4 \strokec4  \cf5 \strokec5 *\cf4 \strokec4 a_ptr) \{\cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf4 \cb3 	\cf8 \strokec8 struct\cf4 \strokec4  \cf7 \strokec7 s\cf4 \strokec4  \cf7 \strokec7 tmp\cf4 \strokec4 ;\cb1 \
\cb3 	\cf8 \strokec8 return\cf4 \strokec4  (\cf8 \strokec8 struct\cf4 \strokec4  \cf7 \strokec7 s\cf4 \strokec4  \cf2 \strokec2 *\cf4 \strokec4 ) (a_ptr \cf2 \strokec2 -\cf4 \strokec4  (\cf2 \strokec2 &\cf4 \strokec4 tmp.a \cf2 \strokec2 -\cf4 \strokec4  \cf2 \strokec2 &\cf4 \strokec4 tmp));\cb1 \
\cb3 \}\cb1 \
\cb3 \uc0\u8203 \cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf9 \cb3 \strokec9 // typedef struct \{\cf4 \cb1 \strokec4 \
\cf9 \cb3 \strokec9 // 	int a;\cf4 \cb1 \strokec4 \
\cf9 \cb3 \strokec9 // 	int b;\cf4 \cb1 \strokec4 \
\cf9 \cb3 \strokec9 // 	char c;\cf4 \cb1 \strokec4 \
\cf9 \cb3 \strokec9 // \} s;\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl340\partightenfactor0
\cf4 \cb3 \uc0\u8203 \cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf8 \cb3 \strokec8 struct\cf4 \strokec4  \cf7 \strokec7 s\cf4 \strokec4  \cf7 \strokec7 tmp\cf4 \strokec4 ;\cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf4 \cb3 tmp.a \cf2 \strokec2 =\cf4 \strokec4  \cf5 \strokec5 10\cf4 \strokec4 ;\cb1 \
\cb3 tmp.b \cf2 \strokec2 =\cf4 \strokec4  \cf5 \strokec5 20\cf4 \strokec4 ;\cb1 \
\cb3 tmp.c \cf2 \strokec2 =\cf4 \strokec4  \cf6 \strokec6 'a'\cf4 \strokec4 ;\cb1 \
\cb3 \uc0\u8203 \cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\AppleTypeServices\AppleTypeServicesF65538 \cf4 \cb3 \
}